---
title: "Tăng Tốc Delivery: Chuyển Từ 'Vibe Code' Sang 'Spec-First' với AI Assistant"
date: 2025-09-14
draft: false
tags: [["dev", "ai", "spec-kit", "workflow", "delivery"]
description: "Làm sao để một dự án hoàn thành thật nhanh mà chất lượng vẫn ngon? Bài viết này chia sẻ một quy trình làm việc đột phá với Spec-Kit và AI để tăng tốc độ delivery đáng kể."
---

<p align="center">
  <img src="/images/post3/sso-issue-banner.jpg" alt="Single Server Diagram" width="800" />
</p>

Thời gian gần đây tôi làm việc rất nhiều với AI. Lúc đầu thì dùng nó như một trợ lý code — hỏi, trả lời, sinh code mẫu. Nhưng càng về sau tôi nhận ra: nếu không có một “khung” rõ ràng thì AI dễ bịa code hoặc làm mọi thứ lộn xộn.

Tôi bắt đầu quan tâm đến hướng spec-first: viết đặc tả (spec) thật rõ, rồi để AI code theo spec đó. Đúng lúc này GitHub tung ra Spec Kit — một bộ công cụ giúp chúng ta áp dụng Spec-Driven Development một cách gọn gàng.

Và khi kết hợp với AI (ở đây tôi chọn Gemini CLI), mọi thứ thực sự trở nên nhanh hơn rất nhiều.

Chuẩn bị

Yêu cầu môi trường:

Linux / macOS (hoặc Windows + WSL2)

Python 3.11+

Git

uv hoặc uvx

Gemini CLI
---------------------------------------------------

Cài đặt

Tôi bắt đầu bằng việc cài Spec Kit:

uvx --from git+https://github.com/github/spec-kit.git specify init <PROJECT_NAME>

Sau đó cài Gemini CLI:

npm install -g @google/gemini-cli
# hoặc thử nhanh
npx https://github.com/google-gemini/gemini-cli

Cuối cùng chạy check:

specify check

👉 (Note: chèn ảnh minh họa bước check)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>


--------------------------------------
Khởi tạo project

Tôi tạo một project todo app nho nhỏ để thử nghiệm:

specify init my-todo-app --ai gemini

Kết quả là Spec Kit sinh ra một scaffold project với 4 thư mục chính: memory/, scripts/, specs/, templates/.

👉 (Note: chèn ảnh minh họa CLI bootstrap)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>

----------------------------------------

Làm việc với Gemini

Tôi mở Gemini CLI:

gemini

Bắt đầu bằng việc viết spec:

/specify A simple todo app: create, update, delete, mark tasks as done. Each task has title, description, and deadline.

👉 (Note: chèn ảnh minh họa bước /specify)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>

Tiếp đó, tôi để Gemini giúp tôi lập plan:

/plan Frontend: React + Vite. Backend: Node.js + Express. Database: MongoDB. Auth: JWT.

👉 (Note: chèn ảnh minh họa bước /plan)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>

Từ plan, tôi generate tasks:

/tasks

👉 (Note: chèn ảnh minh họa bước /tasks)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>

Và cuối cùng, tôi yêu cầu Gemini code theo spec:

Based on specs/001-todo-app/spec.md and plan.md, write the POST /tasks endpoint in Node.js + Express. 
Requirements: validate input, save to MongoDB, return JSON, handle errors.

👉 (Note: chèn ảnh minh họa Gemini sinh code)
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>





----------------------------
Giải thích cấu trúc project

Scaffold của Spec Kit trông như sau:

├── memory
│    ├── constitution.md
│    └── constitution_update_checklist.md
├── scripts
│    ├── check-task-prerequisites.sh
│    ├── common.sh
│    ├── create-new-feature.sh
│    ├── get-feature-paths.sh
│    ├── setup-plan.sh
│    └── update-claude-md.sh
├── specs
│    └── 001-todo-app
│         └── spec.md
└── templates
     ├── plan-template.md
     ├── spec-template.md
     └── tasks-template.md

memory/: lưu các rule, assumption, constitution của project.

scripts/: shell script tiện ích (tạo feature, check prerequisite…).

specs/: nơi tôi đặt đặc tả từng feature.

templates/: các file mẫu để team giữ format đồng nhất.

👉 (Note: chèn ảnh minh họa folder structure)]
<p align="center">
  <img src="/images/post2/1-single-server.png" alt="Single Server Diagram" width="300" />
</p>


---------------------------------
Bài học rút ra

Khi làm việc theo hướng spec-first:

AI bám sát đặc tả, code ít sai hơn.

Team có chung ngôn ngữ: spec chính là hợp đồng.

Refactor hay scale dự án dễ kiểm soát.

Spec Kit chính là cầu nối giúp tôi biến ý tưởng thành code nhanh hơn, gọn hơn, mà vẫn giữ được sự kiểm soát.

---------------------------
Kết

Sau vài ngày thử nghiệm, tôi thấy workflow specify → /specify → /plan → /tasks → code thực sự hiệu quả. Nếu bạn cũng đang dùng AI để code, hãy thử một lần spec-first với Spec Kit.

Có thể bạn sẽ ngạc nhiên giống tôi: code chạy nhanh hơn, ít bug hơn, và cảm giác kiểm soát cũng tốt hơn hẳn!